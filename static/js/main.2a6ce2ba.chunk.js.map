{"version":3,"sources":["helpers/api.js","store/postsReducer.ts","components/Loader/Loader.tsx","components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","App.tsx","store/index.ts","index.tsx"],"names":["BASE_URL","request","all","id","options","fetch","then","response","json","result","data","getPostComments","postId","filter","post","addComment","getUserPosts","userId","setPosts","posts","type","setPostId","activePostId","dispatch","updateActivePost","getPostsSelector","state","getActivePostId","getUserId","initialState","reducer","action","Loader","className","PostsList","selectedPostId","useDispatch","useState","isLoading","setIsLoading","postsAll","useSelector","activeUserId","useEffect","a","setPostsState","postsUserFilter","useMemo","postsAllCopy","length","map","key","meta-key","title","onClick","NewCommentForm","updateCommentsForPost","form","document","AddComment","name","placeholder","method","event","preventDefault","body","JSON","stringify","value","email","headers","PostDetails","visibilityComments","setVisibilityComments","detailsForPost","setPostDetails","listComments","setListComments","detailsPost","comment","commentId","App","onChange","target","updateUserId","rootReducer","combineReducers","postsReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","Root","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.2a6ce2ba.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (all, id = '', options) => fetch(\n    `${BASE_URL}/${all}/${id}`, options,\n  )\n  .then(response => response.json())\n  .then(result => result.data);\n\n// Comments\nexport const getPostComments = postId => request('comments')\n  .then(result => result.filter(post => post.postId === postId));\n\nexport const deleteComment = commentId => request('comments', commentId, {\n  method: 'DELETE'\n});\n\nexport const addComment = options => request('comments', '', options);\n\n// Posts\nexport const getUserPosts = userId => request('posts')\n  .then(result => result.filter(post => (\n    userId ? post.userId === userId : post\n  )));\n\nexport const getPostDetails = postId => request('posts', postId)\n  .then(result => result);\n","import {Dispatch, AnyAction } from 'redux';\nimport { getUserPosts } from '../helpers/api';\n\n// Action types\nconst SET_POSTS = 'SET_POSTS';\nconst UPDATE_ACTIVE_POST = 'UPDATE_ACTIVE_POST';\nconst UPDATE_USER_ID = 'UPDATE_USER_ID';\n\n// Action creators\nexport const setPosts = (posts: any[]) => ({ type: SET_POSTS, posts });\nexport const updateActivePost = (activePostId: number) => ({ type: UPDATE_ACTIVE_POST, activePostId });\nexport const updateUserId = (userId: number) => ({ type: UPDATE_USER_ID, userId });\n\n// Record posts in state\nexport const setPostsState = (setIsLoading: React.Dispatch<React.SetStateAction<boolean>>) => async (dispatch: Dispatch) => {\n  setIsLoading(true);\n  await getUserPosts()\n  .then(posts => dispatch(setPosts(posts)))\n  setIsLoading(false);\n}\n\nexport const setPostId = (activePostId: number) => (dispatch: Dispatch) => {\n  dispatch(updateActivePost(activePostId))\n}\n\nexport const setUserId = (userId: number) => (dispatch: Dispatch) => {\n  dispatch(updateUserId(userId))\n}\n\n// Use selector\nexport const getPostsSelector = (state: RootState) => state.posts.posts;\nexport const getActivePostId = (state: RootState) => state.posts.activePostId;\nexport const getUserId = (state: RootState) => state.posts.userId;\n\nexport type RootState = {\n  posts: any,\n  activePostId: number,\n  userId: number,\n}\n\nconst initialState: RootState = {\n  posts: [],\n  activePostId: 0,\n  userId: 0,\n}\n\nconst reducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return {...state, posts: action.posts};\n\n    case UPDATE_ACTIVE_POST:\n      return {...state, activePostId: action.activePostId};\n\n    case UPDATE_USER_ID:\n      return {...state, userId: action.userId};\n\n    default:\n      return state;\n  }\n};\n\n\nexport default reducer;\n","import React from \"react\";\nimport \"./Loader.scss\";\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, {useState, useEffect, useMemo} from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport './PostsList.scss';\nimport { Loader } from \"../Loader/Loader\";\nimport { getPostsSelector, getUserId, setPostId, setPostsState} from '../../store/postsReducer';\n\n\n\nexport const PostsList = ({selectedPostId}) => {\n  const dispatch = useDispatch();\n  const [isLoading, setIsLoading] = useState(false);\n  const postsAll = useSelector(getPostsSelector);\n  const activeUserId = useSelector(getUserId);\n\n\n  useEffect(() => {\n    dispatch(setPostsState(setIsLoading))\n  }, [dispatch])\n\n  const postsUserFilter = useMemo(() => {\n    let postsAllCopy = [...postsAll];\n    if(postsAll.length > 0 && activeUserId) {\n      postsAllCopy =  [...postsAll].filter(post => post.userId === activeUserId )\n    }\n\n    return postsAllCopy;\n  }, [postsAll, activeUserId])\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <ul className=\"PostsList__list\">\n        {postsUserFilter.map(post => (\n          <li className=\"PostsList__item\" key={post.id} meta-key={post.id}>\n            <div>\n              <b>\n                [User #`$\n                {post.userId}\n                `]:\n                {' '}\n              </b>\n              {post.title}\n            </div>\n            {selectedPostId === post.id ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  dispatch(setPostId(post.id));\n                }}\n              >\n                Close\n              </button>\n              )\n              : (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => {\n                    dispatch(setPostId(post.id));\n                  }}\n                >\n                  Open\n                </button>\n              )\n            }\n          </li>\n        ))}\n      </ul>\n      )}\n     \n    </div>\n  );\n}\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({\n  addComment,\n  selectedPostId,\n  updateCommentsForPost,\n}) => {\n  const form = document.AddComment;\n\n  return (\n    <form className=\"NewCommentForm\" name=\"AddComment\">\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n      <button\n        type=\"submit\"\n        method=\"POST\"\n        className=\"NewCommentForm__submit-button button\"\n        onClick={async(event) => {\n          event.preventDefault();\n          await addComment({\n            method: 'POST',\n            body: JSON.stringify({\n              postId: selectedPostId,\n              name: form.name.value,\n              email: form.email.value,\n              body: form.body.value,\n            }),\n            headers: { 'Content-type': 'application/json; charset=utf-8' },\n          });\n\n          form.name.value = '';\n          form.email.value = '';\n          form.body.value = '';\n          updateCommentsForPost();\n        }}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  addComment: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n  updateCommentsForPost: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostComments, getPostDetails, deleteComment, addComment } from '../../helpers/api';\nimport './PostDetails.scss';\nimport { Loader } from \"../Loader/Loader\";\n\n\nexport const PostDetails = ({selectedPostId}) => {\n  const [visibilityComments, setVisibilityComments] = useState(false);\n  const [detailsForPost, setPostDetails] = useState();\n  const [listComments, setListComments] = useState([]);\n\n  useEffect(() => {\n    getPostDetails(selectedPostId)\n      .then((detailsPost) => {\n        setPostDetails(detailsPost);\n      });\n\n    getPostComments(selectedPostId)\n      .then((result) => {\n        setListComments(result);\n      });\n  }, [selectedPostId]);\n\n  const updateCommentsForPost = () => {\n    getPostComments(selectedPostId)\n      .then((result) => {\n        setListComments(result);\n      });\n  };\n\n  return detailsForPost ? (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{detailsForPost.body}</p>\n      </section>\n      {listComments && listComments.length > 0 && (\n\n        <section className=\"PostDetails__comments\">\n          {visibilityComments ? (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => {\n                setVisibilityComments(false);\n              }\n              }\n            >\n              Hide\n              {listComments.length}\n              {' '}\n              comments\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => {\n                setVisibilityComments(true);\n              }}\n            >\n              Show\n              {' '}\n              {listComments.length}\n              {' '}\n              comments\n            </button>\n          )}\n\n          <ul className=\"PostDetails__list\">\n            {visibilityComments\n            && listComments.map(comment => (\n              <li key={comment.id} className=\"PostDetails__list-item\">\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={async() => {\n                    await deleteComment(comment.id);\n                    getPostComments(selectedPostId)\n                      .then((result) => {\n                        setListComments(result);\n                      });\n                  }}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))\n            }\n          </ul>\n        </section>\n      )}\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            addComment={addComment}\n            selectedPostId={selectedPostId}\n            updateCommentsForPost={updateCommentsForPost}\n          />\n        </div>\n      </section>\n\n    </div>\n  ) : <Loader/>;\n};\n\n// PostDetails.propTypes = {\n//   selectedPostId: PropTypes.string.isRequired,\n// };\n","import React from 'react';\n\nimport './App.scss';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setUserId, getActivePostId } from './store/postsReducer';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const selectedPostId = useSelector(getActivePostId);\n\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of posts</h1>\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n    <select\n            className=\"App__user-selector\"\n          onChange={(event) => dispatch(setUserId(+event.target.value))}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n\n          <PostsList selectedPostId={selectedPostId} />\n        </div>\n        {selectedPostId ? (\n    <div className=\"App__content\">\n      <PostDetails  selectedPostId={selectedPostId} />\n    </div>\n  ) : ''}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport postsReducer from './postsReducer';\n\nconst rootReducer = combineReducers({\n  posts: postsReducer,\n});\n\n// We automatically get types returned by concrete reducers\nexport type RootState = ReturnType<typeof rootReducer>;\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}